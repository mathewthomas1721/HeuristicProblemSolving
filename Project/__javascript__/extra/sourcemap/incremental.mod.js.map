{
	"version": 3,
	"file": "/Users/mathewthomas/HeuristicProblemSolving/Project/__javascript__/incremental.mod.js",
	"sources": [
		"/Users/mathewthomas/HeuristicProblemSolving/Project/incremental.py"
	],
	"sourcesContent": [
		"\nclass Property:\n    def __init__(self,name, base_cost, cost_mult, base_income):\n        self.name = name\n        self.cost = base_cost\n        self.mult = cost_mult\n        self.income = base_income\n        self.count = 0.0\n        self.total_income = 0.0;\n        self.upgrades_Available = []\n\n    def get_income(self):\n        return self.income\n\n\n\n    def inc_cost(self):\n        self.cost *= self.mult\n\n    def buy(self):\n        self.count += 1\n        self.total_income = self.count * self.income\n\n    def upgrade(self):\n        ug = self.upgrades_Available.pop(0)\n        self.income *= ug.mult\n        self.total_income = self.count * self.income\n\nclass Upgrade:\n    def __init__(self, name, cost, mult):\n        self.name = name\n        self.cost = cost\n        self.mult = mult\n\nclass Penalty:\n    def __init__(self,pen):\n        self.name = pen[0]\n        if pen[1] == 0:\n            self.type = 0\n            self.prop = pen[2]\n            self.mult = pen[3]\n        elif pen[1] == 1:\n            self.type = 1\n            self.mult = pen[2]\n            self.duration = pen[3]\n            self.time_left = self.duration\n        else:\n            self.name = \"Florg\"\n\n\n\n\nclass Game:\n    def __init__(self, props, upgrades):\n        self.counter = 0\n        self.currency = 10.0\n        self.pen_count = 0\n        self.properties = []\n        self.global_multiplier = 1.0\n        for prop in props:\n            self.properties.append(Property(prop[0], prop[1], prop[2], prop[3]))\n        for ug in upgrades:\n            self.properties[ug[1]].upgrades_Available.append(Upgrade(ug[0], ug[2], ug[3]))\n        \n\n    def buy_prop(self, prop_to_buy):\n        prop = self.properties[prop_to_buy]\n        if self.currency >= prop.cost:\n            self.currency -= prop.cost\n            prop.inc_cost()\n            prop.buy()\n            return True\n        return False\n\n    def upgrade_prop(self, prop_to_upgrade):\n        prop = self.properties[prop_to_upgrade]\n        ug = prop.upgrades_Available[0]\n        if self.currency >= ug.cost:\n            self.currency -= ug.cost\n            prop.upgrade()\n            return True\n        return False\n\n    def cycle(self):\n        self.counter += 1\n        for prop in self.properties:\n            self.currency += prop.total_income * self.global_multiplier\n\n\nclass Two_Player_Game(Game):\n    def __init__(self, props, upgrades, penalties):\n        Game.__init__(self, props, upgrades)\n        self.penalties = []\n        self.active_penalties = []\n        for pen in penalties:\n            self.penalties.append(Penalty(pen))\n        for prop in self.properties:\n            prop.mult = 1.0\n\n    def buy_prop(self, prop_to_buy):\n        succeed = Game.buy_prop(self, prop_to_buy)\n        if succeed:\n            self.pen_count += 1\n\n    def cycle(self):\n        Game.cycle(self)\n        if self.counter % 25 == 0:\n            self.pen_count += 1\n        new_active = self.active_penalties\n        self.active_penalties = []\n        for pen in self.active_penalties:\n            pen.time_left -= 1\n            if pen.time_left == 0:\n                self.global_multiplier *= (1.0 / pen.mult)\n                pen.time_left = pen.duration\n            else:\n                self.active_penalties.append(pen)\n\n\n    def applyPenalty(self, pen_no):\n        if self.pen_count > 0:\n            self.pen_count -= 1\n            pen = self.penalties[pen_no]\n            pen.name = \"florg1\"\n            if pen.type == 0:\n                self.properties[pen.prop].cost *= pen.mult\n            elif pen.type == 1:\n                self.active_penalties.append(pen)\n                self.global_multiplier *= pen.mult\n\n\nclass incremental:\n\n    properties = [list (tupl) for tupl in [ \n        ('Burger Stand', 10.0, 1.15, 1.0),\n        ('Diner', 100.0, 1.15, 8.0),\n        ('Gas Station', 1000.0, 1.15, 60.0),\n        ('Wal-Mart', 8000.0, 1.15, 420.0),\n        ('Bank',  65000.0, 1.15, 2500.0),\n        ('Department Store',  210000.0, 1.15, 9000.0),\n        ('Auto Manufacturer',  4000000.0, 1.15, 100000.0),\n        ('Conglomerate',  100000000.0, 1.15, 2000000.0) \n    ]]\n\n    upgrades = [list (tupl) for tupl in [ \n        ('Upgrade 1', 0, 10, 2.0),\n        ('Upgrade 1', 1, 10, 2.0),\n        ('Upgrade 1', 2, 10, 2.0),\n        ('Upgrade 1', 3, 10, 2.0),\n        ('Upgrade 1', 4, 10, 2.0),\n        ('Upgrade 1', 5, 10, 2.0),\n        ('Upgrade 1', 6, 10, 2.0),\n        ('Upgrade 1', 7, 10, 2.0),\n        ('Upgrade 1', 0, 10, 2.0),\n        ('Upgrade 1', 1, 10, 2.0),\n        ('Upgrade 1', 2, 10, 2.0),\n        ('Upgrade 1', 3, 10, 2.0),\n        ('Upgrade 1', 4, 10, 2.0),\n        ('Upgrade 1', 5, 10, 2.0),\n        ('Upgrade 1', 6, 10, 2.0),\n        ('Upgrade 1', 7, 10, 2.0),\n        ('Upgrade 1', 0, 10, 2.0),\n        ('Upgrade 1', 1, 10, 2.0),       \n    ]]\n\n    penalties = [list (tupl) for tupl in [ \n        ('Cost Increase 1', 0, 0, 1.15),\n        ('Cost Increase 2', 0, 1, 1.15),\n        ('Cost Increase 3', 0, 2, 1.15),\n        ('Cost Increase 4', 0, 3, 1.15),\n        ('Cost Increase 5', 0, 4, 1.15),\n        ('Cost Increase 6', 0, 5, 1.15),\n        ('Cost Increase 7', 0, 6, 1.15),\n        ('Cost Increase 8', 0, 7, 1.15),\n        ('Penalty 1', 1, 0.5, 100),\n  \n    ]]\n        \n        \n    def __init__ (self, two_player):\n        window.setInterval(self.Update, 500)\n        if two_player:\n            self.gm = Two_Player_Game(self.properties,self.upgrades, self.penalties)\n        else:\n            self.gm = Game(self.properties, self.upgrades)\n        \n        \n    def BuyProp(self, n):\n        self.gm.buy_prop(n - 1)\n        prop = self.gm.properties[n-1]\n        document.getElementById ('prop'+ str(n)) .innerHTML = 'You own {} {}s. Cost for next: {}'.format (prop.count, prop.name, int(prop.cost))\n        document.getElementById('cash').innerHTML = 'Total Cash: {}'.format(int(self.gm.currency))\n            \n\n    def UpgradeProp(self, n):\n        self.gm.upgrade_prop(n - 1)\n        document.getElementById('cash').innerHTML = 'Total Cash: {}'.format(int(self.gm.currency))\n\n    def ApplyPenalty(self, n):\n        self.gm.applyPenalty(n - 1)\n        document.getElementById ('adv1') .innerHTML = 'Adversary has {} penalties to apply. Next Penalty {}.'.format(self.gm.pen_count, self.gm.penalties[0].name)\n        for n in [1,2,3,4,5,6,7,8]:\n            prop = self.gm.properties[n-1]\n            document.getElementById ('prop'+ str(n)) .innerHTML = 'You own {} {}s. Cost for next: {}'.format (prop.count, prop.name, int(prop.cost))\n\n\n\n    def Update (self):\n        self.gm.cycle()\n        document.getElementById('cash').innerHTML = 'Total Cash: {}'.format(int(self.gm.currency))\n        document.getElementById ('adv1') .innerHTML = 'Adversary has {} penalties to apply. Next Penalty {}.'.format(self.gm.pen_count, self.gm.penalties[0].name)\n        for n in [1,2,3,4,5,6,7,8]:\n            prop = self.gm.properties[n-1]\n            document.getElementById ('prop'+ str(n)) .innerHTML = 'You own {} {}s. Cost for next: {}'.format (prop.count, prop.name, int(prop.cost))\n\n\n\n\n\n            \ngame = incremental (True)\n    "
	],
	"mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAkBA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AASA;AATA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}