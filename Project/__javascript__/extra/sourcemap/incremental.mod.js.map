{
	"version": 3,
	"file": "/Users/mathewthomas/HeuristicProblemSolving/Project/__javascript__/incremental.mod.js",
	"sources": [
		"/Users/mathewthomas/HeuristicProblemSolving/Project/incremental.py"
	],
	"sourcesContent": [
		"\n\ndef toForm(num):\n    if (num > 1000000):\n        return num.toExponential(3)\n    else:\n        return num.toFixed(0)\n\nclass Property:\n    def __init__(self,name, base_cost, cost_mult, base_income):\n        self.name = name\n        self.cost = base_cost\n        self.mult = cost_mult\n        self.income = base_income\n        self.count = 0.0\n        self.total_income = 0.0;\n        self.upgrades_Available = []\n\n    def get_income(self):\n        return self.income\n\n\n\n    def inc_cost(self):\n        self.cost *= self.mult\n\n    def buy(self):\n        self.count += 1\n        self.total_income = self.count * self.income\n\n    def get_next_upgrade(self):\n        return self.upgrades_Available[0]\n\n    def upgrade(self):\n        ug = self.upgrades_Available[0]\n        self.income *= ug.mult\n        if len(self.upgrades_Available) == 1:\n            ug.cost *= 10\n        else:\n            self.upgrades_Available.pop(0)\n        self.total_income = self.count * self.income\n\nclass Upgrade:\n    def __init__(self, name, cost, mult):\n        self.name = name\n        self.cost = cost\n        self.mult = mult\n\nclass Penalty:\n    def __init__(self,pen):\n        self.name = pen[0]\n        if pen[1] == 0:\n            self.type = 0\n            self.prop = pen[2]\n            self.mult = pen[3]\n        elif pen[1] == 1:\n            self.type = 1\n            self.mult = pen[2]\n            self.duration = pen[3]\n            self.time_left = self.duration\n        else:\n            self.name = \"Florg\"\n\n\n\n\nclass Game:\n    def __init__(self, props, upgrades):\n        self.counter = 0\n        self.currency = 10.0\n        self.pen_count = 0\n        self.properties = []\n        self.global_multiplier = 1.0\n        for prop in props:\n            self.properties.append(Property(prop[0], prop[1], prop[2], prop[3]))\n        for ug in upgrades:\n            self.properties[ug[1]].upgrades_Available.append(Upgrade(ug[0], ug[2], ug[3]))\n\n\n    def buy_prop(self, prop_to_buy):\n        prop = self.properties[prop_to_buy]\n        if self.currency >= prop.cost:\n            self.currency -= prop.cost\n            prop.inc_cost()\n            prop.buy()\n            return True\n        return False\n\n    def upgrade_prop(self, prop_to_upgrade):\n        prop = self.properties[prop_to_upgrade]\n        ug = prop.upgrades_Available[0]\n        if self.currency >= ug.cost:\n            self.currency -= ug.cost\n            prop.upgrade()\n            return True\n        return False\n\n    def cycle(self):\n        self.counter += 1\n        for prop in self.properties:\n            self.currency += prop.total_income * self.global_multiplier\n\n\nclass Two_Player_Game(Game):\n    def __init__(self, props, upgrades, penalties):\n        Game.__init__(self, props, upgrades)\n        self.penalties = []\n        self.active_penalties = []\n        for pen in penalties:\n            self.penalties.append(Penalty(pen))\n        for prop in self.properties:\n            prop.mult = 1.0\n\n    def buy_prop(self, prop_to_buy):\n        succeed = Game.buy_prop(self, prop_to_buy)\n        if succeed:\n            self.pen_count += 1\n\n    def cycle(self):\n        Game.cycle(self)\n        if self.counter % 25 == 0:\n            self.pen_count += 1\n        new_active = self.active_penalties\n        self.active_penalties = []\n        for pen in self.active_penalties:\n            pen.time_left -= 1\n            if pen.time_left == 0:\n                self.global_multiplier *= (1.0 / pen.mult)\n                pen.time_left = pen.duration\n            else:\n                self.active_penalties.append(pen)\n\n\n    def applyPenalty(self, pen_no):\n        if self.pen_count > 0:\n            self.pen_count -= 1\n            pen = self.penalties[pen_no]\n            pen.name = \"florg1\"\n            if pen.type == 0:\n                self.properties[pen.prop].cost *= pen.mult\n            elif pen.type == 1:\n                self.active_penalties.append(pen)\n                self.global_multiplier *= pen.mult\n\n\nclass incremental:\n\n    properties = [list (tupl) for tupl in [\n        ('Expanding Nim Problem', 10.0, 1.15, 1.0),\n        ('Stoplight Shortest Path Problem', 100.0, 1.15, 8.0),\n        ('No Tipping Problem', 1000.0, 1.15, 60.0),\n        ('Gravitational Voronoi Problem', 8000.0, 1.15, 420.0),\n        ('Evasion',  65000.0, 1.15, 2500.0),\n        ('Dancing Without Stars Problem',  210000.0, 1.15, 9000.0),\n        ('Compatibility Problem',  4000000.0, 1.15, 100000.0),\n        ('Auction Problem',  100000000.0, 1.15, 2000000.0)\n    ]]\n\n    upgrades = [list (tupl) for tupl in [\n        ('Develop Better Algorithm', 0, 10, 2.0),\n        ('Develop Better Algorithm', 1, 10, 2.0),\n        ('Develop Better Algorithms', 2, 10, 2.0),\n        ('Develop Better Algorithm', 3, 10, 2.0),\n        ('Develop Better Algorithm', 4, 10, 2.0),\n        ('Develop Better Algorithm', 5, 10, 2.0),\n        ('Develop Better Algorithm', 6, 10, 2.0),\n        ('Develop Better Algorithm', 7, 10, 2.0),\n    ]]\n\n    penalties = [list (tupl) for tupl in [\n        ('Cost Increase 1', 0, 0, 1.25),\n        ('Cost Increase 2', 0, 1, 1.25),\n        ('Cost Increase 3', 0, 2, 1.25),\n        ('Cost Increase 4', 0, 3, 1.25),\n        ('Cost Increase 5', 0, 4, 1.25),\n        ('Cost Increase 6', 0, 5, 1.25),\n        ('Cost Increase 7', 0, 6, 1.25),\n        ('Cost Increase 8', 0, 7, 1.25),\n        ('Penalty 1', 1, 0.5, 100),\n\n    ]]\n\n\n    def __init__ (self):\n        self.endtime = 100000000\n\n\n\n\n    def StartOnePlayer(self):\n\n        self.gm = Game(self.properties, self.upgrades)\n        self.two_player = False\n        self.Setup()\n\n    def StartTwoPlayer(self):\n\n        self.gm = Two_Player_Game(self.properties,self.upgrades, self.penalties)\n        window.addEventListener('keydown', self.respondKey)\n        self.two_player = True\n        self.Setup()\n\n    def EndGame(self):\n        document.getElementById(\"adPane\").style.display = \"none\"\n        document.getElementById(\"cash\").style.display = \"none\"\n        for n in [1,2,3,4,5,6,7,8]:\n            document.getElementById(\"sec\" + str(n)).style.display = \"none\"\n        document.getElementById(\"startButtons\").style.display = \"inline-block\"\n        document.getElementById(\"resDiv\").style.display = \"inline-block\"\n        document.getElementById(\"resDiv\").innerHTML = \"Game Over. Player earned ${} in {} seconds.\".format(toForm(self.gm.currency), self.endtime)\n        window.clearInterval(self.inter)\n        window.removeEventListener('keydown', self.respondKey)\n\n    def BuyProp(self, n):\n        self.gm.buy_prop(n - 1)\n        prop = self.gm.properties[n-1]\n        document.getElementById ('prop'+ str(n)) .innerHTML = 'You developed {} {} algorithms'.format (prop.count, prop.name)\n        document.getElementById ('PC'+ str(n)) .innerHTML = 'Cost: {} KitKats'.format (toForm(prop.cost))\n        document.getElementById('cash').innerHTML = 'Total KitKats: {}'.format(toForm(self.gm.currency))\n        document.getElementById('tt' + str(n)).innerHTML = \"Your {}s are earning {} KitKats per second\".format(prop.name, toForm(prop.total_income))\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Adversary has {} penalties to apply'.format(self.gm.pen_count)\n\n\n\n    def UpgradeProp(self, n):\n        self.gm.upgrade_prop(n - 1)\n        prop = self.gm.properties[n-1]\n        document.getElementById('cash').innerHTML = 'Total KitKats: {}'.format(toForm(self.gm.currency))\n        document.getElementById('tt' + str(n)).innerHTML = \"Your {} algorithms are earning {} KitKats per second\".format(prop.name, toForm(prop.total_income))\n        ug = prop.get_next_upgrade()\n        document.getElementById('ttu' + str(n)).innerHTML = 'Purchase \"{}\" for ${}. Multipy all {} earnings by {}'.format(ug.name, toForm(ug.cost), prop.name, ug.mult)\n        document.getElementById('ttu' + str(n)).innerHTML = 'Multipy all {} earnings by {}'.format(prop.name, ug.mult)\n        document.getElementById('UC' + str(n)).innerHTML = 'Upgrade : {} KitKats'.format(toForm(ug.cost))\n\n    def ApplyPenalty(self, n):\n        self.gm.applyPenalty(n - 1)\n        document.getElementById ('advcount') .innerHTML = 'Adversary has {} penalties to apply'.format(self.gm.pen_count)\n        for n in [1,2,3,4,5,6,7,8]:\n            prop = self.gm.properties[n-1]\n            document.getElementById ('prop'+ str(n)) .innerHTML = 'You developed {} {} algorithms Cost for next: {} KitKats'.format (prop.count, prop.name, toForm(prop.cost))\n            document.getElementById ('tta'+str(n)) .innerHTML = 'Increase cost of {} by a factor of {}'.format(prop.name, self.gm.penalties[n].mult.toFixed(2))\n\n\n    def respondKey(self, event):\n        self.keyCode = event.keyCode\n        if self.keyCode == ord ('1'):\n            self.ApplyPenalty(1)\n        elif self.keyCode == ord ('2'):\n            self.ApplyPenalty(2)\n        elif self.keyCode == ord ('3'):\n            self.ApplyPenalty(3)\n        elif self.keyCode == ord ('4'):\n            self.ApplyPenalty(4)\n        elif self.keyCode == ord ('5'):\n            self.ApplyPenalty(5)\n        elif self.keyCode == ord ('6'):\n            self.ApplyPenalty(6)\n        elif self.keyCode == ord ('7'):\n            self.ApplyPenalty(7)\n        elif self.keyCode == ord ('8'):\n            self.ApplyPenalty(8)\n\n    def Update (self):\n        self.gm.cycle()\n        document.getElementById('cash').innerHTML = 'Total KitKats: {}'.format(toForm(self.gm.currency))\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Adversary has {} penalties to apply'.format(self.gm.pen_count)\n        if self.gm.counter >= self.endtime:\n            self.EndGame()\n\n\n\n    def Setup(self):\n        textbox = document.getElementById(\"timeSet\")\n        self.endtime = int(textbox.elements[0].value)\n        if self.endtime == 0:\n            self.endtime = 1000000000\n\n        document.getElementById(\"startButtons\").style.display = \"none\"\n        if self.two_player:\n            document.getElementById(\"adPane\").style.display = \"inline-block\"\n        document.getElementById(\"resDiv\").style.display = \"none\"\n        document.getElementById(\"cash\").style.display = \"inline-block\"\n        for n in [1,2,3,4,5,6,7,8]:\n            document.getElementById(\"sec\" + str(n)).style.display = \"inline-block\"\n        self.inter = window.setInterval(self.Update, 1000)\n        document.getElementById('cash').innerHTML = 'Total Cash: ${}'.format(toForm(self.gm.currency))\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Adversary has {} penalties to apply'.format(self.gm.pen_count)\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Adversary has {} penalties to apply'.format(self.gm.pen_count)\n        for n in [1,2,3,4,5,6,7,8]:\n            prop = self.gm.properties[n-1]\n            if self.two_player:\n                document.getElementById ('tta'+str(n)) .innerHTML = 'Increase cost of {} by a factor of {}'.format(prop.name, self.gm.penalties[n].mult.toFixed(2))\n            document.getElementById ('prop'+ str(n)) .innerHTML = 'You developed {} {} algorithms'.format (prop.count, prop.name)\n            document.getElementById ('PC'+ str(n)) .innerHTML = 'Cost: {} KitKats'.format (toForm(prop.cost))\n            document.getElementById('tt' + str(n)).innerHTML = \"Your {}s are earning {} KitKats per second\".format(prop.name, toForm(prop.total_income))\n            ug = prop.get_next_upgrade()\n            document.getElementById('ttu' + str(n)).innerHTML = 'Multipy all {} earnings by {}'.format(prop.name, ug.mult)\n            document.getElementById('UC' + str(n)).innerHTML = 'Upgrade : {} KitKats'.format(toForm(ug.cost))\n\n\n\ngame = incremental ()\n"
	],
	"mappings": "AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AASA;AATA;AAAA;AAAA;AAAA;AAcA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}