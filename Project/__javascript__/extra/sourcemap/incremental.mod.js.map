{
	"version": 3,
	"file": "/Users/mathewthomas/HeuristicProblemSolving/Project/__javascript__/incremental.mod.js",
	"sources": [
		"/Users/mathewthomas/HeuristicProblemSolving/Project/incremental.py"
	],
	"sourcesContent": [
		"base_mult = 1.25\nbase_pen = 1.5\n\ndef toForm(num):\n    if (num > 1000000):\n        return num.toExponential(3)\n    else:\n        round_num = num.toFixed(0)\n        if int(round_num) < num:\n            return (num + 1).toFixed(0)\n        else:\n            return round_num\n\ndef toForm2(num):\n    if (num > 1000000):\n        return num.toExponential(3)\n    else:\n        return num.toFixed(0)\n\ndef currencyName(n):\n    if n == 1:\n        return 'KitKat'\n    else:\n        return 'KitKats'\n\nclass Property:\n    def __init__(self,name, base_cost, cost_mult, base_income):\n        self.name = name\n        self.cost = base_cost\n        self.mult = cost_mult\n        self.income = base_income\n        self.count = 0.0\n        self.total_income = 0.0;\n        self.upgrades_Available = []\n\n    def get_income(self):\n        return self.income\n\n\n\n    def inc_cost(self):\n        self.cost *= self.mult\n\n    def buy(self):\n        self.count += 1\n        self.total_income = self.count * self.income\n\n    def get_next_upgrade(self):\n        return self.upgrades_Available[0]\n\n    def upgrade(self):\n        ug = self.upgrades_Available[0]\n        self.income *= ug.mult\n        if len(self.upgrades_Available) == 1:\n            ug.cost *= 10\n        else:\n            self.upgrades_Available.pop(0)\n        self.total_income = self.count * self.income\n\nclass Upgrade:\n    def __init__(self, name, cost, mult):\n        self.name = name\n        self.cost = cost\n        self.mult = mult\n\nclass Penalty:\n    def __init__(self,pen):\n        self.name = pen[0]\n        if pen[1] == 0:\n            self.type = 0\n            self.prop = pen[2]\n            self.mult = pen[3]\n\n\n\n\nclass Game:\n    def __init__(self, props, upgrades):\n        self.counter = 0\n        self.time = 0\n        self.currency = 6.0\n        self.cum_currency = 0.0\n        self.pen_count = 0\n        self.properties = []\n        self.global_multiplier = 1.0\n        for prop in props:\n            self.properties.append(Property(prop[0], prop[1], prop[2], prop[3]))\n        for ug in upgrades:\n            self.properties[ug[1]].upgrades_Available.append(Upgrade(ug[0], ug[2], ug[3]))\n\n\n    def buy_prop(self, prop_to_buy):\n        prop = self.properties[prop_to_buy]\n        if self.currency >= prop.cost:\n            self.currency -= prop.cost\n            prop.inc_cost()\n            prop.buy()\n            return True\n        return False\n\n    def upgrade_prop(self, prop_to_upgrade):\n        prop = self.properties[prop_to_upgrade]\n        ug = prop.upgrades_Available[0]\n        if self.currency >= ug.cost:\n            self.currency -= ug.cost\n            prop.upgrade()\n            return True\n        return False\n\n    def cycle(self):\n        self.counter += 1\n        self.time += 1\n        for prop in self.properties:\n            self.currency += prop.total_income * self.global_multiplier\n            self.cum_currency += prop.total_income * self.global_multiplier\n\n\nclass Two_Player_Game(Game):\n    def __init__(self, props, upgrades, penalties):\n        Game.__init__(self, props, upgrades)\n        self.penalties = []\n        self.active_penalties = []\n        for pen in penalties:\n            self.penalties.append(Penalty(pen))\n        for prop in self.properties:\n            prop.mult = 1.0\n\n    def buy_prop(self, prop_to_buy):\n        succeed = Game.buy_prop(self, prop_to_buy)\n        if succeed:\n            self.counter = 0\n            self.pen_count += 1\n\n    def cycle(self):\n        Game.cycle(self)\n        if self.counter >= 20:\n            self.pen_count += 1\n            self.counter = 0\n        new_active = self.active_penalties\n        self.active_penalties = []\n        for pen in self.active_penalties:\n            pen.time_left -= 1\n            if pen.time_left == 0:\n                self.global_multiplier *= (1.0 / pen.mult)\n                pen.time_left = pen.duration\n            else:\n                self.active_penalties.append(pen)\n\n\n    def applyPenalty(self, pen_no):\n        if self.pen_count > 0:\n            self.pen_count -= 1\n            pen = self.penalties[pen_no]\n            pen.name = \"florg1\"\n            if pen.type == 0:\n                self.properties[pen.prop].cost *= pen.mult\n            elif pen.type == 1:\n                self.active_penalties.append(pen)\n                self.global_multiplier *= pen.mult\n\n\nclass incremental:\n\n    properties = [list (tupl) for tupl in [\n        ('Expanding Nim', 6.0, base_mult, 1.0),\n        ('Stoplight Shortest Path', 50.0, base_mult, 6.0),\n        ('No Tipping', 400.0, base_mult, 35.0),\n        ('Gravitational Voronoi', 2000.0, base_mult, 144.0),\n        ('Evasion',  10000.0, base_mult, 600.0),\n        ('Dancing Without Stars',  50000.0, base_mult, 2200.0),\n        ('Compatibility Game',  400000.0, base_mult, 11111.0),\n        ('Auction Game',  2000000.0, base_mult, 40000.0)\n    ]]\n\n    upgrades = [list (tupl) for tupl in [\n        ('Dynamic Programming', 0, 40, 2.0),\n        (\"Dijkstra's Algorithm\", 1, 250, 2.0),\n        ('Dynamic Programming', 2, 3000, 2.0),\n        ('Clustering', 3, 18000, 2.0),\n        ('No Diagonal Walls', 4, 80000, 2.0),\n        ('Simulated Annealing', 5, 500000, 2.0),\n        ('Depth First Search', 6, 7000000, 2.0),\n        ('Block Opponents', 7, 33000000, 2.0),\n    ]]\n\n    penalties = [list (tupl) for tupl in [\n        ('Cost Increase 1', 0, 0, base_pen),\n        ('Cost Increase 2', 0, 1, base_pen),\n        ('Cost Increase 3', 0, 2, base_pen),\n        ('Cost Increase 4', 0, 3, base_pen),\n        ('Cost Increase 5', 0, 4, base_pen),\n        ('Cost Increase 6', 0, 5, base_pen),\n        ('Cost Increase 7', 0, 6, base_pen),\n        ('Cost Increase 8', 0, 7, base_pen),\n    ]]\n\n\n    def __init__ (self):\n        self.endtime = 100000000\n\n\n\n\n    def StartOnePlayer(self):\n\n        self.gm = Game(self.properties, self.upgrades)\n        self.two_player = False\n        self.Setup()\n\n    def StartTwoPlayer(self):\n\n        self.gm = Two_Player_Game(self.properties,self.upgrades, self.penalties)\n        window.addEventListener('keydown', self.respondKey)\n        document.getElementById(\"ins\").style.display = \"inline-block\"\n        self.two_player = True\n        self.Setup()\n\n    def EndGame(self):\n        document.getElementById(\"adPane\").style.display = \"none\"\n        document.getElementById(\"cash\").style.display = \"none\"\n        document.getElementById(\"ins\").style.display = \"none\"\n        for n in [1,2,3,4,5,6,7,8]:\n            document.getElementById(\"sec\" + str(n)).style.display = \"none\"\n        document.getElementById(\"startButtons\").style.display = \"inline-block\"\n        document.getElementById(\"resDiv\").style.display = \"inline-block\"\n        document.getElementById(\"resDiv\").innerHTML = \"Game Over. Player earned {} KitKats in {} seconds.\".format(toForm2(self.gm.cum_currency), self.endtime)\n        window.clearInterval(self.inter)\n        window.removeEventListener('keydown', self.respondKey)\n\n    def BuyProp(self, n):\n        self.gm.buy_prop(n - 1)\n        prop = self.gm.properties[n-1]\n        document.getElementById ('prop'+ str(n)) .innerHTML = \"You've developed {} {} algorithms. Earning {} {} per second.\".format (prop.count, prop.name, toForm2(prop.total_income), currencyName(prop.total_income))\n        document.getElementById ('PC'+ str(n)) .innerHTML = 'Cost: {} KitKats'.format (toForm(prop.cost))\n        if (self.endtime - self.gm.time < 10000):\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}<br>Remaining Time : {}'.format(toForm2(self.gm.currency), self.endtime - self.gm.time)\n        else:\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}'.format(toForm2(self.gm.currency))\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Available Penalties : {}'.format(self.gm.pen_count)\n\n\n\n    def UpgradeProp(self, n):\n        self.gm.upgrade_prop(n - 1)\n        prop = self.gm.properties[n-1]\n        if (self.endtime - self.gm.time < 10000):\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}<br>Remaining Time : {}'.format(toForm2(self.gm.currency), self.endtime - self.gm.time)\n        else:\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}'.format(toForm2(self.gm.currency))\n        document.getElementById ('prop'+ str(n)) .innerHTML = \"You've developed {} {} algorithms. Earning {} {} per second.\".format (prop.count, prop.name, toForm2(prop.total_income), currencyName(prop.total_income))\n        document.getElementById('tt' + str(n)).innerHTML = \"Each {} algorithm earns {} {} per second\".format(prop.name, toForm2(prop.income), currencyName(prop.income))\n        ug = prop.get_next_upgrade()\n        document.getElementById('ttu' + str(n)).innerHTML = 'Purchase \"{}\" for {} KitKats. Multipy all {} earnings by {}'.format(ug.name, toForm(ug.cost), prop.name, ug.mult)\n        document.getElementById('ttu' + str(n)).innerHTML = 'Multipy all {} earnings by {}'.format(prop.name, ug.mult)\n        document.getElementById('UC' + str(n)).innerHTML = 'Upgrade : {} KitKats'.format(toForm(ug.cost))\n\n    def ApplyPenalty(self, n):\n        self.gm.applyPenalty(n - 1)\n        document.getElementById ('advcount') .innerHTML = 'Available Penalties : {}'.format(self.gm.pen_count)\n        prop = self.gm.properties[n-1]\n        document.getElementById ('PC'+ str(n)) .innerHTML = 'Cost: {} KitKats'.format (toForm(prop.cost))\n        document.getElementById ('tta'+str(n)) .innerHTML = 'Increase cost of {} by a factor of {}'.format(prop.name, self.gm.penalties[n].mult.toFixed(2))\n\n\n    def respondKey(self, event):\n        self.keyCode = event.keyCode\n        if self.keyCode == ord ('1'):\n            self.ApplyPenalty(1)\n        elif self.keyCode == ord ('2'):\n            self.ApplyPenalty(2)\n        elif self.keyCode == ord ('3'):\n            self.ApplyPenalty(3)\n        elif self.keyCode == ord ('4'):\n            self.ApplyPenalty(4)\n        elif self.keyCode == ord ('5'):\n            self.ApplyPenalty(5)\n        elif self.keyCode == ord ('6'):\n            self.ApplyPenalty(6)\n        elif self.keyCode == ord ('7'):\n            self.ApplyPenalty(7)\n        elif self.keyCode == ord ('8'):\n            self.ApplyPenalty(8)\n\n    def Update (self):\n        self.gm.cycle()\n        if (self.endtime - self.gm.time < 10000):\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}<br>Remaining Time : {}'.format(toForm2(self.gm.currency), self.endtime - self.gm.time)\n        else:\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}'.format(toForm2(self.gm.currency))\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Available Penalties : {}'.format(self.gm.pen_count)\n        if self.gm.time >= self.endtime:\n            self.EndGame()\n\n\n\n    def Setup(self):\n        textbox = document.getElementById(\"timeSet\")\n        self.endtime = int(textbox.elements[0].value)\n        if self.endtime == 0:\n            self.endtime = 1000000000\n\n        document.getElementById(\"startButtons\").style.display = \"none\"\n        document.getElementById(\"resDiv\").style.display = \"none\"\n        document.getElementById(\"story\").style.display = \"none\"\n        if self.two_player:\n            document.getElementById(\"adPane\").style.display = \"inline-block\"\n        document.getElementById(\"cash\").style.display = \"inline-block\"\n        for n in [1,2,3,4,5,6,7,8]:\n            document.getElementById(\"sec\" + str(n)).style.display = \"inline-block\"\n        self.inter = window.setInterval(self.Update, 1000)\n        if (self.endtime - self.gm.time < 10000):\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}<br>Remaining Time : {}'.format(toForm2(self.gm.currency), self.endtime - self.gm.time)\n        else:\n            document.getElementById('cash').innerHTML = 'Total KitKats: {}'.format(toForm2(self.gm.currency))\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Available Penalties : {}'.format(self.gm.pen_count)\n        if self.two_player:\n            document.getElementById ('advcount') .innerHTML = 'Available Penalties : {}'.format(self.gm.pen_count)\n        for n in [1,2,3,4,5,6,7,8]:\n            prop = self.gm.properties[n-1]\n            if self.two_player:\n                document.getElementById ('tta'+str(n)) .innerHTML = 'Increase cost of {} by a factor of {}'.format(prop.name, self.gm.penalties[n-1].mult.toFixed(2))\n            document.getElementById ('prop'+ str(n)) .innerHTML = \"You've developed {} {} algorithms. Earning {} {} per second.\".format (prop.count, prop.name, toForm2(prop.total_income), currencyName(prop.total_income))\n            document.getElementById ('PC'+ str(n)) .innerHTML = 'Cost: {} KitKats'.format (toForm(prop.cost))\n            document.getElementById('tt' + str(n)).innerHTML = \"Each {} algorithm earns {} {} per second\".format(prop.name, toForm2(prop.income), currencyName(prop.income))\n            ug = prop.get_next_upgrade()\n            document.getElementById('ttu' + str(n)).innerHTML = 'Multipy all {} earnings by {}'.format(prop.name, ug.mult)\n            document.getElementById('UC' + str(n)).innerHTML = 'Upgrade : {} KitKats'.format(toForm(ug.cost))\n\n\n\ngame = incremental ()\n"
	],
	"mappings": "AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAQA;AARA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}